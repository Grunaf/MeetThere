from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio
import os
import uuid
from dotenv import load_dotenv

# üß≠ –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
from planner.user_context import user_sessions, save_user_sessions
from planner.loader import load_geojson
from planner.route_builder import build_routes_for_all_days
from planner.user_context import update_filters

load_dotenv()

router = Router()

# === States ===
class PlanningStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_dates = State()
    waiting_for_accommodation = State()
    choosing_travel_mode = State()     
    waiting_for_constraints = State()
    waiting_for_event_link = State()
    confirmation = State()

TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === Handlers ===
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # kb = types.ReplyKeyboardMarkup(
    # keyboard=[
    #     [types.KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
    #     [types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞")],
    #     [types.KeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")]
    # ],
    # resize_keyboard=True
    # )
    # await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ç—ã –µ–¥–µ—à—å?", reply_markup=kb)
    # await state.set_state(PlanningStates.waiting_for_city)
    await state.update_data({
        "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "dates": "20‚Äì26 –∏—é–Ω—è",
        "accommodation": "–ë–∞–ª—Ç–∏–π—Å–∫–∏–π –≤–æ–∫–∑–∞–ª",
        "constraints": "–±–µ–∑ –º—É–∑–µ–µ–≤",
        "travel_mode": "solo"
    })

    await message.answer("–¢–µ—Å—Ç: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª:\n"
        "–ì–æ—Ä–æ–¥: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
        "–î–∞—Ç—ã: 20‚Äì26 –∏—é–Ω—è\n"
        "–†–∞–π–æ–Ω: –ë–∞–ª—Ç–∏–π—Å–∫–∏–π –≤–æ–∫–∑–∞–ª\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –±–µ–∑ –º—É–∑–µ–µ–≤\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
    )
    await state.set_state(PlanningStates.confirmation)

@router.message(PlanningStates.waiting_for_city)
async def city_chosen(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫–∏–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5‚Äì8 –º–∞—è)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PlanningStates.waiting_for_dates)

@router.message(PlanningStates.waiting_for_dates)
async def dates_chosen(message: Message, state: FSMContext):
    await state.update_data(dates=message.text)
    
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–¶–µ–Ω—Ç—Ä")],
            [types.KeyboardButton(text="–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥–∫–∞")],
            [types.KeyboardButton(text="–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤")],
            [types.KeyboardButton(text="–î—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ì–¥–µ —Ç—ã –±—É–¥–µ—à—å –∂–∏—Ç—å? –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞–π–æ–Ω –∏–ª–∏ –º–µ—Ç—Ä–æ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –≤ –¥—Ä—É–≥–æ–π –∫–æ–Ω–µ—Ü –≥–æ—Ä–æ–¥–∞ üòÑ", reply_markup=kb)
    await state.set_state(PlanningStates.waiting_for_accommodation)


@router.message(PlanningStates.waiting_for_accommodation)
async def accommodation_chosen(message: Message, state: FSMContext):
    await state.update_data(accommodation=message.text)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–¥–∏–Ω")],
            [KeyboardButton(text="–° –∫–µ–º-—Ç–æ")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–¢—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—à—å –æ–¥–∏–Ω –∏–ª–∏ —Å –∫–µ–º-—Ç–æ?",
        reply_markup=kb
    )
    await state.set_state(PlanningStates.choosing_travel_mode)

@router.message(PlanningStates.choosing_travel_mode)
async def travel_mode_chosen(message: Message, state: FSMContext):
    choice = message.text.lower()
    if "–æ–¥–∏–Ω" in choice:
        await state.update_data(travel_mode="solo")
        await message.answer("–û–∫–µ–π, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è.")
    else:
        trip_id = str(uuid.uuid4())[:8]
        await state.update_data(trip_id=trip_id, travel_mode="group")
        link = f"https://t.me/MeetThere?start=join_{trip_id}"
        await message.answer(f"–°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–µ–∑–¥–∫–∏!\n–û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n{link}")

    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–µ–∑ –º—É–∑–µ–µ–≤', '–Ω–µ –±–æ–ª—å—à–µ 3 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å')", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PlanningStates.waiting_for_constraints)


@router.message(PlanningStates.waiting_for_constraints)
async def constraints_chosen(message: Message, state: FSMContext):
    await state.update_data(constraints=message.text)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True
    )

    await message.answer(
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –Ø–Ω–¥–µ–∫—Å.–ê—Ñ–∏—à–∏), –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –µ—ë ‚Äî —è –¥–æ–±–∞–≤–ª—é –≤ –º–∞—Ä—à—Ä—É—Ç.\n"
        "–ï—Å–ª–∏ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=kb
    )
    await state.set_state(PlanningStates.waiting_for_event_link)

@router.message(PlanningStates.waiting_for_event_link, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_event_link(message: Message, state: FSMContext):
    user_data = await state.get_data()
    summary = (
        f"–í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª:\n"
        f"–ì–æ—Ä–æ–¥: {user_data.get('city', '-')}\n"
        f"–î–∞—Ç—ã: {user_data.get('dates', '-')}\n"
        f"–†–∞–π–æ–Ω: {user_data.get('accommodation', '-')}\n"
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {user_data.get('constraints', '-')}\n"
        "\n–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
    )
    await message.answer(summary)
    await state.set_state(PlanningStates.confirmation)

@router.message(PlanningStates.confirmation)
async def build_and_send(message: Message):

    routes = build_routes_for_all_days(
        user_location=[59.908814, 30.310512],
        user_id=str(message.from_user.id) 
    )

    print(routes)
    
    for route in routes:
        if route["points"]:
            day_text = f"üóì <b>–î–µ–Ω—å {route['day']}</b>\n"
            poi_list = "\n".join([f"‚Ä¢ {p['name']}" for p in route["points"]])
            await message.answer(
                f"{day_text}{poi_list}\n\nüîó <a href='{route['yandex_url']}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>",
                parse_mode="HTML"
            )
        else:
            await message.answer(f"–î–µ–Ω—å {route['day']}: –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞\n{route.get('note', '')}")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–º
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç", callback_data="reroll")],
        # [InlineKeyboardButton(text="üö´ –ò—Å–∫–ª—é—á–∏—Ç—å POI", callback_data="excl_poi")],
        # [InlineKeyboardButton(text="üö´ –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–≥", callback_data="excl_tag")],
        # [InlineKeyboardButton(text="‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å –º—É–∑–µ–π", callback_data="exclude_museum")],
        # [InlineKeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω", callback_data="change_location")],
        # [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="clear_filters")]
    ])
    await message.answer("üîß –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç?", reply_markup=kb)

@router.message(PlanningStates.confirmation)
async def confirm_data(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await build_and_send(message)
    else:
        await message.answer("–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ç—ã –µ–¥–µ—à—å?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(PlanningStates.waiting_for_city)

# @dp.callback_query_handler(text="excl_tag")
# async def ask_which_tag_to_exclude(q: CallbackQuery):
#     session = user_sessions[str(q.from_user.id)]
#     # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö POI:
#     routes = session.get("cached_routes", [])
#     tags = set()
#     for day in routes:
#         for p in day.get("points", []):
#             for k,v in p.get("properties", {}).get("tags", {}).items():
#                 tags.add(k)
#                 tags.add(v)
#     # –°—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏:
#     kb = InlineKeyboardMarkup(row_width=3)
#     for t in sorted(tags):
#         kb.insert(InlineKeyboardButton(t, callback_data=f"tag__{t}"))
#     await q.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=kb)

# @dp.callback_query_handler(lambda c: c.data.startswith("tag__"))
# async def exclude_tag_cb(q: CallbackQuery):
#     tag = q.data.split("__",1)[1]
#     user_id = q.from_user.id
#     session = user_sessions.setdefault(str(user_id), {})
#     filters = session.setdefault("filters", {})
#     excl = filters.get("exclude_tags", [])
#     if tag not in excl:
#         excl.append(tag)
#         update_filters(user_id, exclude_tags=excl)
#     await q.answer(f"–¢–µ–≥ ¬´{tag}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
#     # –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –º–∞—Ä—à—Ä—É—Ç:
#     await recalc_and_send(q.message, user_id)


@router.callback_query(lambda c: c.data == "reroll")
async def reroll_route(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    session = user_sessions.setdefault(user_id, {})
    session["last_request_hash"] = None   # üí• –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö—ç—à, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
    user_sessions[user_id] = session
    save_user_sessions()
    await callback.message.answer("üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥—Ä—É–≥–æ–π –º–∞—Ä—à—Ä—É—Ç...")
    await build_and_send(callback.message)

@router.callback_query(lambda c: c.data == "exclude_museum")
async def exclude_category(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    session = user_sessions.setdefault(user_id, {})
    session.setdefault("exclude_categories", [])
    if "–º—É–∑–µ–π" not in session["exclude_categories"]:
        session["exclude_categories"].append("–º—É–∑–µ–π")

    session["last_request_hash"] = None
    user_sessions[user_id] = session
    save_user_sessions()

    await callback.message.answer("‚ùå –£–±–∏—Ä–∞—é –º—É–∑–µ–∏ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞...")
    await confirm_data(callback.message, state)

@router.callback_query(lambda c: c.data == "change_location")
async def change_location(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìç –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω –∏–ª–∏ –º–µ—Ç—Ä–æ:")
    await state.set_state(PlanningStates.waiting_for_accommodation)
    
@router.callback_query(lambda c: c.data == "clear_filters")
async def clear_filters(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    session = user_sessions.setdefault(user_id, {})
    session["exclude_categories"] = []
    session["exclude_names"] = []
    session["last_request_hash"] = None
    user_sessions[user_id] = session
    save_user_sessions()

    await callback.message.answer("üßπ –§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã. –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—é –º–∞—Ä—à—Ä—É—Ç...")
    await confirm_data(callback.message, state)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
