"""update nullable for columns, and add num enum and drop type in segment and object_type in transport price entry

Revision ID: 0bd5b110c40a
Revises: bcd75d5b91e9
Create Date: 2025-06-22 19:27:40.587336

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0bd5b110c40a'
down_revision = 'bcd75d5b91e9'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('price_entry')
    with op.batch_alter_table('city', schema=None) as batch_op:
        batch_op.alter_column('lat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('lon',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)

    with op.batch_alter_table('day', schema=None) as batch_op:
        batch_op.alter_column('day_order',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('day_variant', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('est_budget',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('day_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('meal_place', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))

    op.execute("UPDATE meal_place SET created_at = '2025-05-05 05:05:05.555' WHERE created_at IS NULL")

    with op.batch_alter_table('meal_place', schema=None) as batch_op:
        batch_op.alter_column('created_at', nullable=False)


    with op.batch_alter_table('poi', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('must_see',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('lat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('lon',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)

    with op.batch_alter_table('segment', schema=None) as batch_op:
        batch_op.alter_column('variant_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    op.execute("UPDATE segment SET city_id = 1 WHERE city_id is NULL")

    with op.batch_alter_table('segment', schema=None) as batch_op:
        batch_op.alter_column('city_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_column('type')

    with op.batch_alter_table('transition_option', schema=None) as batch_op:
        batch_op.alter_column('is_default',
               existing_type=sa.BOOLEAN(),
               nullable=False)

    with op.batch_alter_table('transport_cache', schema=None) as batch_op:
        batch_op.alter_column('date_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)

    with op.batch_alter_table('transport_price_entry', schema=None) as batch_op:
        batch_op.alter_column('object_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('last_known_price',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('source_url',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.drop_column('object_type')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transport_price_entry', schema=None) as batch_op:
        batch_op.add_column(sa.Column('object_type', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.alter_column('source_url',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('last_known_price',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('object_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('transport_cache', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('date_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)

    with op.batch_alter_table('transition_option', schema=None) as batch_op:
        batch_op.alter_column('is_default',
               existing_type=sa.BOOLEAN(),
               nullable=True)

    with op.batch_alter_table('segment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.alter_column('city_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('variant_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('poi', schema=None) as batch_op:
        batch_op.alter_column('lon',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('lat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('must_see',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)

    with op.batch_alter_table('meal_place', schema=None) as batch_op:
        batch_op.drop_column('created_at')

    with op.batch_alter_table('day_variant', schema=None) as batch_op:
        batch_op.alter_column('day_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('est_budget',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)

    with op.batch_alter_table('day', schema=None) as batch_op:
        batch_op.alter_column('day_order',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('city', schema=None) as batch_op:
        batch_op.alter_column('lon',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('lat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)

    op.create_table('price_entry',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('object_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('object_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_price_entry'))
    )
    # ### end Alembic commands ###
