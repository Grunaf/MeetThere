from datetime import datetime
import hashlib
import json
import random
from geopy.distance import geodesic
from sklearn.cluster import DBSCAN
import numpy as np

from planner.clusterer import cluster_by_dbscan
from planner.exporter import build_yandex_maps_url
from planner.ors_matrix import get_duration_matrix_ors
from planner.user_context import user_sessions, mark_used_clusters
from planner.utils import hash_request, latlon_to_geojson
from planner.cluster_cache import load_cache, save_cache
from planner.loader import load_geojson
from planner.user_context import save_user_sessions

def group_close_pois(points, eps_m=50):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –±–ª–∏–∑–∫–∏–µ POI (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø–ª–æ—â–∞–¥–∏) –≤ –æ–¥–Ω—É "–ª–æ–∫–∞—Ü–∏—é"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è POI, —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏
    """
    if len(points) == 0:
        return []

    coords = np.array([
        [p["geometry"]["coordinates"][1], p["geometry"]["coordinates"][0]] for p in points
    ])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º eps –≤ –≥—Ä–∞–¥—É—Å—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 111_000 –º –Ω–∞ –≥—Ä–∞–¥—É—Å)
    eps_deg = eps_m / 111_000
    model = DBSCAN(eps=eps_deg, min_samples=1).fit(coords)

    grouped_points = []
    labels = model.labels_

    for label in set(labels):
        cluster = [p for i, p in enumerate(points) if labels[i] == label]
        main_poi = cluster[0]
        nearby = [p["properties"].get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") for p in cluster[1:]]

        if nearby:
            main_poi["properties"]["nearby"] = nearby
        grouped_points.append(main_poi)

    return grouped_points

def calculate_cluster_interest(clusters):
    """
    –ü–æ–¥—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ (–∫–ª–∞—Å—Ç–µ—Ä–∞)
    –Ω–∞ –æ—Å–Ω–æ–≤–µ total_interest_score –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë.
    """
    cluster_scores = {}

    for cluster_id, features in clusters.items():
        scores = []
        for feature in features:
            properties = feature.get("properties", {})
            score = properties.get("total_interest_score", 0)
            scores.append(score)
        
        if scores:
            avg_score = sum(scores) / len(scores)
        else:
            avg_score = 0
        
        cluster_scores[cluster_id] = avg_score

    return cluster_scores

def calculate_real_travel_time(user_location, target_location, profile="foot-walking"):
    """
    –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ OpenRouteService API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É.
    """
    coords = [user_location, target_location]
    matrix = get_duration_matrix_ors(coords, profile)
    if matrix is None:
        print("‚ùå –û—à–∏–±–∫–∞: –º–∞—Ç—Ä–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")
        return float('inf')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞
    
    return matrix[0][1]  # –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –æ—Ç user_location –¥–æ target_location

def build_routes_by_clusters(clusters, cluster_scores, user_location, session, max_minutes_per_day=300, max_clusters_per_day=5, max_days=2, distance_threshold_km=10):
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–µ–∑–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.
    Clusters [lat, lon]
    user_location [lat, lon]
    """
    print("\nüöÄ –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω–µ–π –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    exclude = set(session.get("used_clusters", []))

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    # candidates = [cid for cid in clusters if cid not in exclude]
    # random.shuffle(candidates)

    cluster_centers = {}
    for cluster_id, features in clusters.items():    
        if cluster_id in exclude:
            continue
        coords = np.array([[f["geometry"]["coordinates"][1], f["geometry"]["coordinates"][0]] for f in features]) # out [lat, lon]
        center_lat = np.mean(coords[:, 0])
        center_lon = np.mean(coords[:, 1])
        cluster_centers[cluster_id] = (center_lat, center_lon)

    unvisited = set(cluster_centers.keys())
    all_days_routes = []
    day_counter = 1

    while unvisited and day_counter <= max_days:
        current_location = user_location
        visited_today = []
        total_time_today = 0
        
        # –°–ø–µ—Ä–≤–∞ –∏—â–µ–º –≤—ã–µ–∑–¥–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä
        distant_clusters = [
            cid for cid in unvisited
            if geodesic(current_location, cluster_centers[cid]).km > distance_threshold_km
        ]

        if distant_clusters:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–ª—å–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã ‚Äî –≤—ã–±–µ—Ä–µ–º —Å–∞–º—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
            distant_clusters = sorted(
                distant_clusters,
                key=lambda cid: cluster_scores.get(cid, 0),
                reverse=True
            )
            selected_cluster = distant_clusters[0]
            coord_from = latlon_to_geojson(user_location)
            coord_to = latlon_to_geojson(cluster_centers[selected_cluster])

            travel_time_one_way = calculate_real_travel_time(coord_from, coord_to, profile="driving-car")
            full_travel_time = travel_time_one_way * 2  # —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ

            if full_travel_time + 120 <= max_minutes_per_day:  # 2 —á–∞—Å–∞ –∑–∞–ø–∞—Å–∞ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É
                visited_today = [selected_cluster]
                total_time_today = full_travel_time
                unvisited.remove(selected_cluster)

                print(f"üöó –î–µ–Ω—å {day_counter}: –≤—ã–±—Ä–∞–Ω–∞ –≤—ã–µ–∑–¥–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä {selected_cluster}")
                print(f"   –í—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ: {int(full_travel_time)} –º–∏–Ω—É—Ç")
                print(f"   –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏: {cluster_scores.get(selected_cluster, 0)}")

                all_days_routes.append({
                    "day": day_counter,
                    "clusters": visited_today,
                    "total_estimated_time_min": int(total_time_today),
                    "note": f"–í—ã–µ–∑–¥–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞: –¥–æ—Ä–æ–≥–∞ —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ –∑–∞–π–º–µ—Ç {int(full_travel_time)} –º–∏–Ω—É—Ç",
                    "is_remote_cluster": True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
                })

                day_counter += 1
                continue
            else:
                # ‚ùó –µ—Å–ª–∏ –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ –≤—ã–µ–∑–¥–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ ‚Äî —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º
                print(f"‚ùå –í—ã–µ–∑–¥–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä {selected_cluster} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                unvisited.remove(selected_cluster)


        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–ª–∏–∂–Ω–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        while unvisited and len(visited_today) < max_clusters_per_day:
            nearest_cluster = min(
                unvisited,
                key=lambda cid: geodesic(current_location, cluster_centers[cid]).km - 0.05 * cluster_scores.get(cid, 0)
            )

            distance_km = geodesic(current_location, cluster_centers[nearest_cluster]).km
            estimated_travel_time_min = (distance_km / 5.0) * 60  # –ø–µ—à–∫–æ–º
            estimated_visit_time_min = 60  # –±–∞–∑–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ª–æ–∫–∞—Ü–∏—é

            estimated_total_time = estimated_travel_time_min + estimated_visit_time_min

            if total_time_today + estimated_total_time > max_minutes_per_day:
                break

            visited_today.append(nearest_cluster)
            unvisited.remove(nearest_cluster)
            total_time_today += estimated_total_time
            current_location = cluster_centers[nearest_cluster]
            print(f"üó∫ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä {nearest_cluster} –Ω–∞ –¥–µ–Ω—å {day_counter}")
            print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.2f} –∫–º, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: {estimated_travel_time_min:.1f} –º–∏–Ω")
            print(f"   –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏: {cluster_scores.get(nearest_cluster, 0)}")

        if visited_today:
            all_days_routes.append({
                "day": day_counter,
                "clusters": visited_today,
                "total_estimated_time_min": int(total_time_today)
            })
            print(f"‚úÖ –î–µ–Ω—å {day_counter} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(visited_today)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –æ–±—â–µ–µ –≤—Ä–µ–º—è {total_time_today:.1f} –º–∏–Ω—É—Ç\n")

            day_counter += 1
            if max_days is not None and day_counter > max_days:
                print(f"üìÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –¥–Ω—è–º: {max_days} –¥–Ω–µ–π")
                break
    used = set()
    for day_route in all_days_routes:
        used.update(day_route.get("clusters", []))
    # –ü–æ–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    session["used_clusters"] = list(exclude.union(used))
    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è save_user_sessions)
    save_user_sessions()
    return all_days_routes


def build_day_route_from_clusters(clusters, selected_cluster_ids, user_location, max_minutes=300, max_poi_per_day=15, is_remote_cluster=False):
    """
    –°—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º,
    –Ω–∞—á–∏–Ω–∞—è –æ—Ç –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–∏–ª—å—Ç—Ä—É—è —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–æ—á–∫–∏
    –∏ —É—á–∏—Ç—ã–≤–∞—è –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏.
    """
    print(f"\nüìÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø–æ {len(selected_cluster_ids)} –∫–ª–∞—Å—Ç–µ—Ä–∞–º...")

    points = []

    for cluster_id in selected_cluster_ids:
        points.extend(clusters.get(cluster_id, []))

    if not points:
        return {
            "total_estimated_time_min": 0,
            "points": [],
            "yandex_url": build_yandex_maps_url([user_location]),
            "note": "–ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞"
        }

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑–∏—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∫ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
    for point in points:
        point["visit_time"] = point.get("properties", {}).get("estimated_time", 30)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏
    points = sorted(
        points,
        key=lambda p: p.get("properties", {}).get("total_interest_score", 0),
        reverse=True
    )
    points = points[:max_poi_per_day]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞
    fake_home = {
        "geometry": {"coordinates": latlon_to_geojson(user_location)},
        "properties": {"name": "–î–æ–º"},
        "visit_time": 0
    }
    points = [fake_home] + points

    coords = [p["geometry"]["coordinates"] for p in points]

    if len(coords) < 2:
        return {
            "total_estimated_time_min": 0,
            "points": [],
            "yandex_url": build_yandex_maps_url([user_location]),
            "note": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞"
        }
    if is_remote_cluster:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
        matrix = get_duration_matrix_ors(coords, profile="driving-car")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
        matrix = get_duration_matrix_ors(coords)

    visited = set()
    current_index = 0  # —Å—Ç–∞—Ä—Ç—É–µ–º –∏–∑ –¥–æ–º–∞
    total_time = 0
    route = []

    while True:
        best_idx = None
        best_score = float("inf")

        for i in range(1, len(points)):
            if i in visited:
                continue

            walk_time = matrix[current_index][i]
            interest_score = points[i].get("properties", {}).get("total_interest_score", 0)
            visit_time = points[i]["visit_time"]
            # –ë–∞–ª–∞–Ω—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ + –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏
            total = walk_time + visit_time - 0.1 * interest_score  # –ß–µ–º –≤—ã—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å, —Ç–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ —Ç–æ—á–∫–∞

            if total < best_score:
                best_score = total
                best_idx = i

            print(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ç–æ—á–∫–∏ {current_index} –∫ —Ç–æ—á–∫–µ {best_idx}:")
            print(f"   –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥: {walk_time:.1f} –º–∏–Ω, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å —Ç–æ—á–∫–∏: {interest_score}")
            print(f"   –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_time:.1f} –º–∏–Ω")

        if best_idx is None or total_time + (matrix[current_index][best_idx] + points[best_idx]["visit_time"]) > max_minutes:
            break

        total_time += matrix[current_index][best_idx] + points[best_idx]["visit_time"]
        visited.add(best_idx)
        route.append(points[best_idx])
        current_index = best_idx
        print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(route)} —Ç–æ—á–µ–∫, –æ–±—â–µ–µ –≤—Ä–µ–º—è {total_time:.1f} –º–∏–Ω—É—Ç\n")
    

    coords_for_map = [fake_home["geometry"]["coordinates"]] + [p["geometry"]["coordinates"] for p in route]
    yandex_url = build_yandex_maps_url(coords_for_map)

    return {
        "total_estimated_time_min": int(total_time),
        "points": [
            {
                "name": p["properties"].get("name"),
                "coordinates": p["geometry"]["coordinates"],
                "estimated_time": p["visit_time"]
            } for p in route
        ],
        "yandex_url": yandex_url
    }

def build_routes_for_all_days(user_location, max_minutes_per_day=300, max_days=2, user_id=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –≤—Å–µ –¥–Ω–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º,
    –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.
    user_location [lat, lon]
    """

    print(f"\n=== –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ===")
    print(f"–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ü–µ–Ω—Ç—Ä: {user_location}")

    geojson_data = load_geojson("with_popularity_(MAqZGVA)(Peter)v2.geojson")

    # 1) –ü–æ–ª—É—á–∏–º —Ö–µ—à –≤—Ö–æ–¥–Ω–æ–≥–æ geojson:
    raw = json.dumps(geojson_data, sort_keys=True, ensure_ascii=False)
    geo_hash = hashlib.sha256(raw.encode()).hexdigest()
    city_center = (59.9386, 30.3141)  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –º–æ–∂–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞—Ç—å [lat, lon]

    # 2) –ó–∞–≥—Ä—É–∑–∏–º –∫—ç—à
    cache = load_cache()
    if cache.get("hash") == geo_hash:
        print("‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: –±–µ—Ä–µ–º –∏–∑ –∫—ç—à–∞")
        clusters = cache["clusters"]
    else:
        print("üöÄ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à")
        clusters = cluster_by_dbscan(geojson_data, city_center)
        cache["hash"] = geo_hash
        cache["clusters"] = clusters
        save_cache(cache)

    clusters = cluster_by_dbscan(geojson_data, city_center)
    cluster_scores = calculate_cluster_interest(clusters)

    print(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(clusters)} –ª–æ–∫–∞—Ü–∏–π.")

    session = user_sessions.setdefault(str(user_id), {})
    excluded_names = session.get("exclude_names", [])
    excluded_categories = session.get("exclude_categories", [])
    print(f"–§–∏–ª—å—Ç—Ä—ã: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {excluded_categories}, –Ω–∞–∑–≤–∞–Ω–∏—è - {excluded_names}")

    request_data = {
        "location": user_location,
        "excluded": {
            "names": excluded_names,
            "categories": excluded_categories
        }
    }

    request_hash = hash_request(request_data)
    # if session.get("last_request_hash") == request_hash:
    #     print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à")
    #     return session.get("cached_routes")

    day_cluster_routes = build_routes_by_clusters(
        clusters=clusters,
        cluster_scores=cluster_scores,
        user_location=user_location,
        session=session,
        max_minutes_per_day=max_minutes_per_day,
        max_clusters_per_day=5,
        max_days=max_days
    )

    all_routes = []

    for day_route in day_cluster_routes:
        day = day_route["day"]
        selected_clusters = day_route["clusters"]

        day_plan = build_day_route_from_clusters(
            clusters=clusters,
            selected_cluster_ids=selected_clusters,
            user_location=user_location,
            max_minutes=max_minutes_per_day,
            is_remote_cluster=day_route.get("is_remote_cluster", False),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥
        )

        all_routes.append({
            "day": day,
            "total_estimated_time_min": day_plan["total_estimated_time_min"],
            "points": day_plan["points"],
            "yandex_url": day_plan["yandex_url"]
        })

    all_used = [int(cid) for day in day_cluster_routes for cid in day["clusters"]]
    mark_used_clusters(user_id, all_used)

    # Save the planned routes and previous trips in the session
    session["last_request_hash"] = request_hash
    session["cached_routes"] = all_routes

    # Store previous trips
    previous_trips = session.get("previous_trips", [])
    previous_trips.append({
        "date": str(datetime.now()),  # Store the date of the trip
        "routes": all_routes
    })
    session["previous_trips"] = previous_trips

    user_sessions[str(user_id)] = session
    save_user_sessions()

    return all_routes
