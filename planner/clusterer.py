from sklearn.cluster import DBSCAN
import numpy as np
from geopy.distance import geodesic

def adaptive_eps(center_point, poi_point):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–¥–∏—É—Å eps –¥–ª—è DBSCAN –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    """
    distance_km = geodesic(center_point, poi_point).km
    if distance_km < 5:
        return 0.004  # –≤ —Ü–µ–Ω—Ç—Ä–µ (‚âà400 –º)
    elif distance_km < 15:
        return 0.008  # –±–ª–∏–∂–µ –∫ –æ–∫—Ä–∞–∏–Ω–∞–º (‚âà800 –º)
    else:
        return 0.015  # –¥–∞–ª–µ–∫–æ (‚âà1500 –º)

def cluster_by_dbscan(geojson_data, city_center, min_samples=2):
    """
    –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è POI —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º eps.
    geojson_data ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π GeoJSON,
    city_center ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ (lat, lon).
    result [lat, lon]
    """

    features = geojson_data["features"]
    valid_pts = []
    valid_features = []
    invalid_count = 0
    invalid_examples = []

    for f in features:
            geom = f.get("geometry", {})
            coords = geom.get("coordinates")
            if (isinstance(coords, list)
                and len(coords) == 2
                and isinstance(coords[0], (int, float))
                and isinstance(coords[1], (int, float))):
                # –≤–∞–ª–∏–¥–Ω–∞—è —Ç–æ—á–∫–∞
                valid_pts.append([coords[1], coords[0]])  # [lat, lon]
                valid_features.append(f)
            else:
                invalid_count += 1
                # –°–æ–±–µ—Ä—ë–º –ø–∞—Ä—É –ø–µ—Ä–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
                if len(invalid_examples) < 5:
                    invalid_examples.append(coords)

    total = len(features)
    print(f"üìù –í—Å–µ–≥–æ —Ñ–∏—á–µ–π: {total}, –≤–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_features)}, –æ—Ç–±—Ä–æ—à–µ–Ω–æ: {invalid_count}")
    if invalid_examples:
        print("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:", invalid_examples)

    if not valid_features:
        print("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        return {}

    coords = np.array(valid_pts)

    # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π eps –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ ---
    eps_values = np.array([
        adaptive_eps(city_center, (lat, lon)) 
        for lat, lon in coords
    ])

    # --- –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ DBSCAN ---
    # –í sklearn DBSCAN –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –û–î–ò–ù eps
    # –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å" –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.
    # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± ‚Äî –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.
    # –£–ø—Ä–æ—â—ë–Ω–Ω–æ: –¥–µ–ª–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–∞ eps –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏.

    scaled_coords = coords / eps_values[:, np.newaxis]  # —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É

    db = DBSCAN(eps=1.0, min_samples=min_samples).fit(scaled_coords)
    labels = db.labels_

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã ---
    clusters = {}
    for i, label in enumerate(labels):
        if label == -1:
            continue  # –≤—ã–±—Ä–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if label not in clusters:
            clusters[label] = []
        clusters[label].append(features[i])

    return clusters
