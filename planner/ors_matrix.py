import openrouteservice
import numpy as np
import os
from dotenv import load_dotenv

from planner.exporter import build_yandex_maps_url

load_dotenv()

ORS_API_KEY = os.getenv("ORS_API_KEY")  # –∏–ª–∏ –≤—Å—Ç–∞–≤—å –≤—Ä—É—á–Ω—É—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

client = openrouteservice.Client(key=ORS_API_KEY)



def get_duration_matrix_ors(coords, profile="foot-walking"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ ORS.
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞: 'foot-walking', 'driving-car', 'driving-hgv', 'cycling-regular' –∏ –¥—Ä.
    """
    if len(coords) < 2:
        return [[0]]
    
    try:
        response = client.distance_matrix(
            locations=coords,
            profile=profile,
            metrics=["duration"],
            units="m",
            resolve_locations=True
        )
        print(f"üì° ORS –∑–∞–ø—Ä–æ—Å –Ω–∞ {len(coords)} —Ç–æ—á–µ–∫")
        print("üöÄ ORS –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
        for c in coords:
            print(f"{c}")
        print(build_yandex_maps_url(coords));    

        durations = response.get("durations", None)
        if durations is None:
            raise RuntimeError(f"‚ùå ORS –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—Ç: {response}")
        
        return (np.array(durations) / 60).tolist()  # —Å–µ–∫—É–Ω–¥—ã -> –º–∏–Ω—É—Ç—ã

    except openrouteservice.exceptions.ApiError as e:
        print(f"ORS API error: {e}")
        return None
    
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        return None
