import json
from shapely.geometry import shape
import time
import requests
import urllib.parse

def calculate_base_interest_score(properties, geom):
    score = 0.0
    tourism = properties.get('tourism')
    if   tourism == 'museum':    return 100.0
    elif tourism == 'gallery':   return  90.0
    elif tourism == 'aquarium':  return  90.0
    elif tourism == 'zoo':       return  85.0
    elif tourism == 'viewpoint': return  75.0
    elif tourism == 'attraction':score =  70.0

    amenity = properties.get('amenity')
    if   amenity == 'arts_centre': score = max(score, 70.0)
    elif amenity == 'theatre':     score = max(score, 80.0)

    historic = properties.get('historic')
    if historic in ('castle','fort','city_gate','memorial','monument',
                    'arch','monastery','ship'):
        return 95.0
    elif isinstance(historic, str) and historic.strip():
        score = max(score, 60.0)

    return float(score)


def calculate_popularity_score(properties, geom):
    popularity_score = 0
    if properties.get('wikipedia'): popularity_score += 30
    if properties.get('wikidata'):   popularity_score += 20
    return float(popularity_score)

def calculate_total_interest_score(properties, geom):
    base  = properties.get('base_interest_score',  0.0)
    pop   = properties.get('popularity_score',     0.0)
    norm  = properties.get('normalized_wiki_views',0.0)
    # —è —É–±—Ä–∞–ª user_interest_match, –µ–≥–æ –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ —É–∂–µ –≤ –±–æ—Ç–µ
    return float(0.35*base + 0.25*pop + 0.25*norm*100)

def get_wikipedia_views(wikipedia_tag):
    if not wikipedia_tag or ':' not in wikipedia_tag:
        return 0
    lang, page = wikipedia_tag.split(':', 1)
    if lang != 'ru':
        print(f"‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-—Ä—É—Å—Å–∫—É—é —Å—Ç–∞—Ç—å—é: {wikipedia_tag}")
        return 0
    title = urllib.parse.quote(page.replace(' ', '_'))
    url = (
      f"https://wikimedia.org/api/rest_v1/metrics/pageviews/"
      f"per-article/ru.wikipedia.org/all-access/user/"
      f"{title}/monthly/20240401/20240430"
    )
    print(f"üîµ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è ¬´{wikipedia_tag}¬ª: {url}")
    try:
        r = requests.get(url, headers={'User-Agent':'MyResearchBot/1.0'})
        time.sleep(0.3)
        j = r.json()
        views = j.get('items',[{}])[0].get('views',0)
        print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        return views
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {wikipedia_tag}: {e}")
        return 0
    
in_path  = "Mus-Aqua-Zoo-Gal-View-Attrac(Peter)v2.geojson"
out_path = "with_popularity_(MAqZGVA)(Peter)v2.geojson"
print(f"üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {in_path}‚Ä¶")
with open(in_path, encoding="utf-8") as f:
    geo = json.load(f)
print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")

# === 4) –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º feature ===
print("‚è≥ –°–æ–±–∏—Ä–∞–µ–º Wikipedia views‚Ä¶")
for feat in geo.get("features", []):
    props = feat.setdefault("properties", {})
    # –ø–æ–¥–ø–∏—à–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    wiki_tag = props.get("wikipedia")
    props["wiki_views"] = get_wikipedia_views(wiki_tag)
    # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –±—É–¥–µ–º –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
print("‚úÖ –í—Å–µ Wikipedia views —Å–æ–±—Ä–∞–Ω—ã.")

# –Ω–∞–π–¥—ë–º –º–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
max_views = max(f["properties"]["wiki_views"] for f in geo["features"]) or 1
print(f"‚ÑπÔ∏è –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {max_views}, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º‚Ä¶")
# –∏ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏–º normalized_wiki_views
for feat in geo["features"]:
    props = feat["properties"]
    props["normalized_wiki_views"] = float(props["wiki_views"] / max_views)
print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏ –ø–æ–ª—è interest –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ —Ü–∏–∫–ª–∞
print("‚è≥ –°—á–∏—Ç–∞–µ–º interest-–æ—Ü–µ–Ω–∫–∏‚Ä¶")
for feat in geo["features"]:
    props = feat["properties"]
    # geometry shapely:
    try:
        geom = shape(feat["geometry"])
    except:
        geom = None

    # —Å—á–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    props["base_interest_score"]  = calculate_base_interest_score (props, geom)
    props["popularity_score"]     = calculate_popularity_score     (props, geom)
    props["total_interest_score"] = calculate_total_interest_score(props, geom)
print("‚úÖ –í—ã—á–∏—Å–ª–µ–Ω—ã –≤—Å–µ interest-–æ—Ü–µ–Ω–∫–∏.")

# === 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ geojson ===
print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª {out_path}‚Ä¶")
with open(out_path, "w", encoding="utf-8") as f:
    json.dump(geo, f, ensure_ascii=False, indent=2)

print(f"‚úÖ –§–∞–π–ª ¬´{out_path}¬ª —Å–æ–∑–¥–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.")
